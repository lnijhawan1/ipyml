on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  PYTHONUNBUFFERED: 1
  SKIP_CONDA_PREFLIGHT: 1
  INSTALL_ARTIFACT: wheel
  CONDA_EXE: mamba
  FORGE_BASE: https://github.com/conda-forge/miniforge/releases/download/4.9.2-5/Mambaforge-4.9.2-5
  CACHE_EPOCH: 1

jobs:
  ci:
    name: CI
    runs-on: ${{ matrix.os }}-latest
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu
          - macos
          - windows
        include:
          - os: ubuntu
            miniforge: Linux-x86_64.sh
          - os: macos
            miniforge: MacOSX-x86_64.sh
          - os: windows
            miniforge: Windows-x86_64.exe
    steps:
      - name: configure line endings
        run: |
          git config --global core.autocrlf false

      - name: git checkout
        uses: actions/checkout@v2

      - name: cache (conda)
        uses: actions/cache@v1
        with:
          path: ~/conda_pkgs_dir
          # TODO add to key hash: 'anaconda-project-lock.yml' 
          key: |
            ${{ env.CACHE_EPOCH }}-${{ runner.os }}-conda-ci-${{ hashFiles('.ci/environment.yml') }}
          restore-keys: |
            ${{ env.CACHE_EPOCH }}-${{ runner.os }}-conda-ci-
            ${{ env.CACHE_EPOCH }}-${{ runner.os }}-conda-

      - name: cache (yarn)
        uses: actions/cache@v1
        with:
          path: .yarn-packages
          key: |
            ${{ env.CACHE_EPOCH }}-yarn-${{ runner.os }}-${{ hashFiles('yarn.lock') }}
          restore-keys: |
            ${{ env.CACHE_EPOCH }}-yarn-${{ runner.os }}-
            ${{ env.CACHE_EPOCH }}-yarn-

      - name: env (conda)
        uses: conda-incubator/setup-miniconda@v2
        with:
          activate-environment: ipyml-base
          auto-activate-base: false
          condarc-file: .github/.condarc
          environment-file: .ci/environment.yml
          installer-url: ${{ env.FORGE_BASE }}-${{ matrix.miniforge }}
          show-channel-urls: true
          use-only-tar-bz2: true

      - name: build (linux/macos)
        if: ${{ matrix.os != 'windows' }}
        shell: bash -l {0}
        # run: INSTALL_ARTIFACT=sdist doit -n4 release || doit release
        run: INSTALL_ARTIFACT=sdist doit -n4 test || doit test

      - name: build (windows)
        if: ${{ matrix.os == 'windows' }}
        shell: cmd /C CALL {0}
        # run: call .ci\win.bat release
        run: call .ci\win.bat test

      # - name: publish build (linux)
      #   if: ${{ matrix.os == 'ubuntu' }}
      #   uses: actions/upload-artifact@v2
      #   with:
      #     name: ipyml dist ${{ github.run_number }}
      #     path: ./dist

      - name: publish coverage (linux)
        if: ${{ matrix.os == 'ubuntu' }}
        uses: actions/upload-artifact@v2
        with:
          name: ipyml coverage ${{ github.run_number }}
          path: ./build/htmlcov

  ui:
    name: UI
    runs-on: ${{ matrix.os }}-latest
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu
          - macos
          - windows
        include:
          - os: ubuntu
            miniforge: Linux-x86_64.sh
          - os: macos
            miniforge: MacOSX-x86_64.sh
          - os: windows
            miniforge: Windows-x86_64.exe
    steps:
      - name: configure line endings
        run: |
          git config --global core.autocrlf false

      - name: git checkout
        uses: actions/checkout@v2

      - name: cache (conda)
        uses: actions/cache@v1
        with:
          path: ~/conda_pkgs_dir
          # TODO add to key hash: 'anaconda-project-lock.yml' 
          key: |
            ${{ env.CACHE_EPOCH }}-${{ runner.os }}-conda-ui-
          restore-keys: |
            ${{ env.CACHE_EPOCH }}-${{ runner.os }}-conda-ui-
            ${{ env.CACHE_EPOCH }}-${{ runner.os }}-conda-

      - name: cache (yarn)
        uses: actions/cache@v1
        with:
          path: .yarn-packages
          key: |
            ${{ env.CACHE_EPOCH }}-yarn-${{ runner.os }}-${{ hashFiles('yarn.lock') }}
          restore-keys: |
            ${{ env.CACHE_EPOCH }}-yarn-${{ runner.os }}-
            ${{ env.CACHE_EPOCH }}-yarn-

      - name: env (conda)
        uses: conda-incubator/setup-miniconda@v2
        with:
          activate-environment: ipyml-base
          auto-activate-base: false
          condarc-file: .github/.condarc
          environment-file: .ci/environment.yml
          installer-url: ${{ env.FORGE_BASE }}-${{ matrix.miniforge }}
          show-channel-urls: true
          use-only-tar-bz2: true

      - name: dev (linux/macos)
        if: ${{ matrix.os != 'windows' }}
        shell: bash -l {0}
        run: doit -n4 preflight:lab || doit preflight:lab

      - name: dev (windows)
        if: ${{ matrix.os == 'windows' }}
        shell: cmd /C CALL {0}
        run: call .ci\win.bat preflight:lab
